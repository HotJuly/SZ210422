1.props
	使用场景:父子组件通信
	父传子
		1.父组件通给给子组件的组件标签添加标签属性
		2.子组件通过声明props实现对标签属性的数据接收
		3.子组件通过this可以直接获取到对应的props属性
	子传父
		1.父组件通过给子组件的组件标签添加标签属性,属性值必须是父组件中的methods函数
		2.子组件通过声明props实现对标签属性的数据接收
		3.子组件调用父组件传递的函数,并向函数内部传入实参
		4.函数内部会修改父组件的状态数据
			this.a = data

2.provide/inject
	使用场景:祖孙组件通信
	流程:
		1.想要传递数据的祖先组件,在配置对象中添加provide属性,属性值为对象,内部写入需要传递的数据
		2.想要接收数据的后代组件,在配置对象中添加inject属性,属性值为数组,数组中写入数据的属性名即可
	注意:
		1.inject查找数据的顺序,是从当前组件开始,逆向往根组件进行查找,找到最近的一个provide
		2.provide默认暴露的数据不是响应式的,如果需要响应式效果,需要自己手动绑定响应式

3.自定义事件
	v-model	
		一共具有两种使用方式:
			1.对input标签使用
				1)将data中属性的数值作为默认值显示在input框内部
				2)当用户修改input框的内容时,会同步修改data中对应的属性值
					注意:默认绑定是的input事件
					
			2.对组件标签使用
				1)将data中属性的数值作为标签属性传递给子组件
					属性名:value
				2)v-model会给子组件绑定自定义事件input
					自定义事件名:input
				3)子组件只需要调用自定义事件input,并传入实参,就可以同步修改父组件的状态数据
				
				注意:可以使用model属性控制v-model绑定的属性名和自定义事件名
	
	$on,$emit,$once,$off
	.sync修饰符
		1)将data中属性的数值作为标签属性传递给子组件
		2).sync会给子组件绑定自定义事件
			自定义事件名:update:属性名
		3)子组件只需要调用自定义事件update:属性名,并传入实参,就可以同步修改父组件的状态数据

	全局事件总线
		1.创建$bus对象,存放于Vue原型身上
			Vue.prototype.$bus = new Vue();
		2.在需要接受数据的组件上订阅消息(绑定自定义事件)
			this.$bus.$on(事件名,事件回调函数)
		3.在需要发送数据的组件上发布消息(触发自定义事件)
			this.$bus.$emit(消息名称,数据)


4.找到对应的组件实例
	$parent	获取当前组件的父组件实例对象
	$children  获取到当前组件的子组件实例对象组成的数组
		注意:修改当前数组的顺序,不会影响到页面的展示顺序
	$root	获取到当前项目的根组件实例对象(Root组件)
	$refs	使用方法有两种:
			1.对标签使用	可以获得对应标签的真实DOM
			2.对组件使用	可以获得对应组件的实例对象

5.$attrs,$listeners
	$attrs	收集所有没被props接受的标签属性数据
	$listeners	收集当前组件身上绑定的所有自定义事件





